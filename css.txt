









1.媒体查询最大最小宽两者之间
@media only screen and (min-width : 992px) and (max-width : 1920px){ body { width:980px; margin:0 auto;} } 

2.IE11中input提交出现×号
  input::-ms-clear{display:none;}

3.css3框架animate.css用法
  $(this).addClass('animated flipOutX')
  .animated{
    animation-duration:0.5s;//动画时间
  }

4.css3属性--animation
  animation: move 10s linear 0s infinite normal;
  animation: footer 1s infinite; //css3动画循环播放
  animation-delay:2s            //css3动画延时
  transition:all 2s ease 2s;    // all 时间2s ease 延时2s
  
  animation: name duration timing-function delay iteration-count direction;
  animation-name                         规定需要绑定到选择器的 keyframe 名称。。    
  animation-duration                    规定完成动画所花费的时间，以秒或毫秒计。  例：o.5s    
  animation-timing-function        规定动画的速度曲线。    例：ease、cubic-bezier(n,n,n,n)	 
  animation-delay                        规定在动画开始之前的延迟。  例：o.5s    
  animation-iteration-count         规定动画应该播放的次数。（值：n次，infinite无限循环）    
  animation-direction                   规定是否应该轮流反向播放动画。Boolen
  animation-play-state	规定动画是否正在运行或暂停。默认是 "running"。   paused(暂停) | running(播放);	
  animation-fill-mode	属性规定动画在播放之前或之后，其动画效果是否可见。 默认:none
	
5、css3动画4种过渡方式
linear	规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。(匀速)
ease	规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）（相对于匀速，中间快，两头慢）。
ease-in	规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）（相对于匀速，开始的时候慢，之后快）。
ease-out	规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）（相对于匀速，开始时快，结束时候间慢，）。
ease-in-out	规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）（相对于匀速，（开始和结束都慢）两头慢）。


6、字符间距
    letter-spacing：3

7、input placeholder字体颜色修改
::-webkit-input-placeholder { /* WebKit browsers */
	color: #6C7EA4;
}
:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
	color: #6C7EA4;
}
::-moz-placeholder { /* Mozilla Firefox 19+ */
	color: #6C7EA4;
}
:-ms-input-placeholder { /* Internet Explorer 10+ */
	color: #6C7EA4;
}

8.英文长字符自动换行
   *{
    word-break: break-all; word-wrap:break-word
}

9.禁止默认长按复制功能
手机端
*{
  -webkit-touch-callout:none;  /*系统默认菜单被禁用*/
  -webkit-user-select:none; /*webkit浏览器*/
  -khtml-user-select:none; /*早期浏览器*/
  -moz-user-select:none; /*火狐*/
  -ms-user-select:none;  /*IE10*/
  user-select:none;
}
input{
  -webkit-user-select: auto;
}
pc端
  body {
            -moz-user-select: none;
            -o-user-select: none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
            user-select: none;
   }

10.文字超出部分以省略号形式展现
a、单行文本
  .new-item {
    width: 230px;
     overflow: hidden;
    white-space: nowrap;//属性设置如何处理元素内的空白。 nowrap(文本不会换行)
    text-overflow: ellipsis;;//文本溢出显示省略号
    display: inline-block;
  }

b、多行文本
 .txt{
     text-overflow:ellipsis;//文本溢出显示省略号
     display:box;
     line-clamp: 10; //行数
     box-orient: vertical; //属性规定框的子元素应该被水平或垂直排列 vertical(垂直排列)
     overflow: hidden;
  }
.txt{
   overflow: hidden;
   text-overflow: ellipsis;				
  display: -webkit-box;
-webkit-line-clamp: 2;				
-webkit-box-orient: vertical;									
}				


11、css3文字缩小
  .txt{
     transform:scale(0.5);
     transform-origin: 0% 0%;
   }

12、表格边框修改(表格固定宽度)
table {
    display: block;
    margin: 0 auto;
     /*为表格设置合并边框模型*/
    border-collapse: collapse;
   /*列宽由表格宽度和列宽度设定*/
    table-layout: fixed;
}

table td {
    border: 1px solid black;
    /*允许在单词内换行。*/
     word-break: break-word;
    width: 100px;
}

13、flex水平、垂直对齐
  ul{
   justify-content:center;
   align-items: center;
  }

14、单位(vh)
      width:100vh  相当于宽100%；
       height:100vh  相当于高100%（当元素内容不够时会自动撑开）
      例：height: calc(100vh - 265px)  自适应高度
      less中   height: ~"calc(100% - 265px)";

15、文字按原型输出对齐    
      white-space: pre !important;   //pre（空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。）
      例：<p>哈哈哈哈</p> 
             <p>哈      哈</p>

16、强制换行
            word-break:break-all;    ie/Firefox
            word-wrap : break-word   ie

17、浏览器记住密码-input样式覆盖解决方式
input:-webkit-autofill {
  -webkit-text-fill-color: #fff !important;
  transition: background-color 50000s ease-in-out 0s;
 }

18、CSS3 特殊字体写入
      例： @font-face {
            font-family: myFirstFont;
            src: url('Sansation_Light.ttf'), url('Sansation_Light.eot');
            /* IE9 */
        }
        div {
            font-family: myFirstFont;
        }


19、正则表达式语法规则
* A: 正则表达式语法规则
		* a: 字符
			* x  代表的是字符x
			* \\ 代表的是反斜线字符'\'
			* \t 代表的是制表符
			* \n 代表的是换行符
			* \r 代表的是回车符
		* b: 字符类
			* [abc]    a、b 或 c（简单类）
			* [^abc]   任何字符，除了 a、b 或 c（否定）
			* [a-zA-Z] a到 z 或 A到 Z，两头的字母包括在内（范围） 
			* [0-9]    0到9的字符都包括
			* [a-zA-Z_0-9] 代表的字母或者数字或者下划线(即单词字符)
		* c: 预定义字符类
			* . 任何字符。
			* \d 数字：[0-9]
			* \w 单词字符：[a-zA-Z_0-9]如"com.itheima.tests"/finish
		* d: 边界匹配器
			* ^  代表的是行的开头
			* $  代表的是行的结尾
			* \b 代表的是单词边界
		* e: 数量词
			* X?     X，一次或一次也没有
			* X*     X，零次或多次
			* X+     X，一次或多次
			* X{n}   X，恰好 n 次 
			* X{n,}  X，至少 n 次 
			* X{n,m} X，至少 n 次，但是不超过 m 次	
* A: 正则表达式练习和相关的String类方法
		* a: boolean matches(String 正则的规则)
			* "abc".matches("[a]")  
			* 匹配成功返回true
		* b: String[] split(String 正则的规则)
			* "abc".split("a")  
			* 使用规则将字符串进行切割
		* c: String replaceAll( String 正则规则,String 字符串)
			* "abc0123".repalceAll("[\\d]","#")	
			* 按照正则的规则,替换字符串	

20、css背景透明度
       background:rgba(255,255,255,0.5);

21、flex布局常用属性
 justify-content     属性定义了项目在主轴上的对齐方式。
 justify-content : flex-start（默认值）：左对齐
                         flex-end：右对齐
                         center： 居中
                         space-between：两端对齐，项目之间的间隔都相等。
                         space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍
align-items属性定义项目在交叉轴上如何对齐。
                flex-start：交叉轴的起点对齐。
                flex-end：交叉轴的终点对齐。
                center：交叉轴的中点对齐。
                baseline: 项目的第一行文字的基线对齐。
                stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
       父级 
       .box{
           display:flex;
           display: inline-flex;  //用于行内元素
           justify-content : space-between   //两端对齐，项目之间的间隔都相等。
          align-items：center    //交叉轴的中点对齐。
       }
       子级
      .left{
          flex:1,    //等比分配  占1
      }
      .right:{
          flex:2,    //等比分配  占2
      }
            

22、position:sticky    
position属性中最有意思的就是sticky了，设置了sticky的元素，在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），
当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。

23、移动端初始页面强制横屏显示
<!-- ? #main{? ? //注意这里：初始时候我们需要将这个div的长宽给设置一下（ps：宽度要大于高度）
? ? ? ? ? ? ? ? ? width:560px;
? ? ? ? ? ? ? ? ? height:320px;
? ? ? ?}
? ?????@media screen and (orientation: portrait){? ? ?//竖屏状态下
? ? ? ? ? ? ? ? ? ? #main{??
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? position:absolute;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? width: 100vh;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? height: 100vw;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? top: 0;
? ? ? ? ? ? ? ? ? ? ? ??????????left: 100vw;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? -webkit-transform:rotate(90deg);
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? -moz-transform: rotate(90deg);
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? -ms-transform: rotate(90deg);
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?transform:rotate(90deg);
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?transform-origin: 0% 0%;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?}??
? ? ? ? ? }
? ? ? ? ? @media screen and (orientation: landscape) {? ? ? ? //横屏状态下
? ? ? ? ? ? ? ? ? ? #main {
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ??position:absolute;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? top:0;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? left:0;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? width: 100vw;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? height: 100vh;
? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? }
? ? ? ? ? ? } -->